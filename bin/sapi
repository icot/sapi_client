#!/usr/bin/env python

import sys, json, inspect, datetime

import requests

# CLI generation
import fire

# Configuration loading
import ConfigParser
from ConfigParser import SafeConfigParser

# CERN DB Storage API client library
import sapi_client
from sapi_client.api_client import ApiClient

CONFIG = SafeConfigParser()
CFG_CANDIDATES = ['/etc/sapi/sapi.conf']
FOUND = CONFIG.read(CFG_CANDIDATES)

API_HOST = None

try:
    API_HOST = CONFIG.get('api', 'host')
    API_USER = CONFIG.get('api', 'user')
    API_PASSWORD = CONFIG.get('api', 'password')
    if not API_HOST or not API_USER or not API_PASSWORD:
        print "Error in CONFIG file. API host/userr/password not defined"
        sys.exit(-1)

except ConfigParser.NoSectionError:
    print "Error in CONFIG file. [api] section not defined"
    sys.exit(-1)

try:
    CA_CERT = CONFIG.get('certs', 'ca')
    if not CA_CERT:
        print "Error in CONFIG file. ca not defined"
        sys.exit(-1)
except ConfigParser.NoSectionError:
    print "Error in CONFIG file. [certs] section not defined"
    sys.exit(-1)


# Configure OAuth3 access token for authorization: sso

APICONFIG = sapi_client.Configuration()

APICONFIG.access_token = None
APICONFIG.host = API_HOST
APICONFIG.access_token = 'dummytoken' # Need's to be defined
APICONFIG.debug = False
APICONFIG.ssl_ca_cert = CA_CERT


MY_URL = "https://%s/login_basic" % (API_HOST)

def get_cookie():
    r = requests.get(MY_URL, auth=(API_USER, API_PASSWORD), cookies=jar,
            allow_redirects = False)
    return r.headers.get('Set-Cookie')


def main():
    """ Main function """

    # create an instance of the API class
    api_client = ApiClient(header_name='Cookie',
                           header_value=get_cookie(),
                           configuration=APICONFIG)
    api_instance = sapi_client.apis.sapi_api.SapiApi(api_client)

    ##  Launch CLI

    # The stdout redirection is a hacky but direct way of avoiding the default
    # Fire output to be displayed

    stdout_bak = sys.stdout
    sys.stdout = open('/dev/null','w')
    buf = fire.Fire(api_instance)
    sys.stdout = stdout_bak # Re-enable

    # Convert output to JSON for easier automatic processing (e.g. jq)
    # - datetime objects need to be converted to strings

    buf = buf.to_dict()
    for k,v in buf.items():
        if isinstance(v, datetime.datetime):
            buf[k] = "%s" % v
    print(json.dumps(buf,indent=2, sort_keys=True))

if __name__ == '__main__':
    main()
