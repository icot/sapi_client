# coding: utf-8

"""
    CERN Unified Storage API

    A unified storage API for all data-storage back-ends.

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VolumeCreate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, autosize_enabled=None, autosize_increment=None, max_autosize=None, active_policy_name=None, percentage_snapshot_reserve=None, compression_enabled=None, inline_compression=None, caching_policy=None, name=None, size_total=None, aggregate_name=None, junction_path=None):
        """
        VolumeCreate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'autosize_enabled': 'bool',
            'autosize_increment': 'int',
            'max_autosize': 'int',
            'active_policy_name': 'str',
            'percentage_snapshot_reserve': 'int',
            'compression_enabled': 'bool',
            'inline_compression': 'bool',
            'caching_policy': 'str',
            'name': 'str',
            'size_total': 'int',
            'aggregate_name': 'str',
            'junction_path': 'str'
        }

        self.attribute_map = {
            'autosize_enabled': 'autosize_enabled',
            'autosize_increment': 'autosize_increment',
            'max_autosize': 'max_autosize',
            'active_policy_name': 'active_policy_name',
            'percentage_snapshot_reserve': 'percentage_snapshot_reserve',
            'compression_enabled': 'compression_enabled',
            'inline_compression': 'inline_compression',
            'caching_policy': 'caching_policy',
            'name': 'name',
            'size_total': 'size_total',
            'aggregate_name': 'aggregate_name',
            'junction_path': 'junction_path'
        }

        self._autosize_enabled = autosize_enabled
        self._autosize_increment = autosize_increment
        self._max_autosize = max_autosize
        self._active_policy_name = active_policy_name
        self._percentage_snapshot_reserve = percentage_snapshot_reserve
        self._compression_enabled = compression_enabled
        self._inline_compression = inline_compression
        self._caching_policy = caching_policy
        self._name = name
        self._size_total = size_total
        self._aggregate_name = aggregate_name
        self._junction_path = junction_path

    @property
    def autosize_enabled(self):
        """
        Gets the autosize_enabled of this VolumeCreate.

        :return: The autosize_enabled of this VolumeCreate.
        :rtype: bool
        """
        return self._autosize_enabled

    @autosize_enabled.setter
    def autosize_enabled(self, autosize_enabled):
        """
        Sets the autosize_enabled of this VolumeCreate.

        :param autosize_enabled: The autosize_enabled of this VolumeCreate.
        :type: bool
        """

        self._autosize_enabled = autosize_enabled

    @property
    def autosize_increment(self):
        """
        Gets the autosize_increment of this VolumeCreate.

        :return: The autosize_increment of this VolumeCreate.
        :rtype: int
        """
        return self._autosize_increment

    @autosize_increment.setter
    def autosize_increment(self, autosize_increment):
        """
        Sets the autosize_increment of this VolumeCreate.

        :param autosize_increment: The autosize_increment of this VolumeCreate.
        :type: int
        """

        self._autosize_increment = autosize_increment

    @property
    def max_autosize(self):
        """
        Gets the max_autosize of this VolumeCreate.

        :return: The max_autosize of this VolumeCreate.
        :rtype: int
        """
        return self._max_autosize

    @max_autosize.setter
    def max_autosize(self, max_autosize):
        """
        Sets the max_autosize of this VolumeCreate.

        :param max_autosize: The max_autosize of this VolumeCreate.
        :type: int
        """

        self._max_autosize = max_autosize

    @property
    def active_policy_name(self):
        """
        Gets the active_policy_name of this VolumeCreate.

        :return: The active_policy_name of this VolumeCreate.
        :rtype: str
        """
        return self._active_policy_name

    @active_policy_name.setter
    def active_policy_name(self, active_policy_name):
        """
        Sets the active_policy_name of this VolumeCreate.

        :param active_policy_name: The active_policy_name of this VolumeCreate.
        :type: str
        """
        if active_policy_name is not None and len(active_policy_name) < 1:
            raise ValueError("Invalid value for `active_policy_name`, length must be greater than or equal to `1`")

        self._active_policy_name = active_policy_name

    @property
    def percentage_snapshot_reserve(self):
        """
        Gets the percentage_snapshot_reserve of this VolumeCreate.

        :return: The percentage_snapshot_reserve of this VolumeCreate.
        :rtype: int
        """
        return self._percentage_snapshot_reserve

    @percentage_snapshot_reserve.setter
    def percentage_snapshot_reserve(self, percentage_snapshot_reserve):
        """
        Sets the percentage_snapshot_reserve of this VolumeCreate.

        :param percentage_snapshot_reserve: The percentage_snapshot_reserve of this VolumeCreate.
        :type: int
        """

        self._percentage_snapshot_reserve = percentage_snapshot_reserve

    @property
    def compression_enabled(self):
        """
        Gets the compression_enabled of this VolumeCreate.

        :return: The compression_enabled of this VolumeCreate.
        :rtype: bool
        """
        return self._compression_enabled

    @compression_enabled.setter
    def compression_enabled(self, compression_enabled):
        """
        Sets the compression_enabled of this VolumeCreate.

        :param compression_enabled: The compression_enabled of this VolumeCreate.
        :type: bool
        """

        self._compression_enabled = compression_enabled

    @property
    def inline_compression(self):
        """
        Gets the inline_compression of this VolumeCreate.

        :return: The inline_compression of this VolumeCreate.
        :rtype: bool
        """
        return self._inline_compression

    @inline_compression.setter
    def inline_compression(self, inline_compression):
        """
        Sets the inline_compression of this VolumeCreate.

        :param inline_compression: The inline_compression of this VolumeCreate.
        :type: bool
        """

        self._inline_compression = inline_compression

    @property
    def caching_policy(self):
        """
        Gets the caching_policy of this VolumeCreate.

        :return: The caching_policy of this VolumeCreate.
        :rtype: str
        """
        return self._caching_policy

    @caching_policy.setter
    def caching_policy(self, caching_policy):
        """
        Sets the caching_policy of this VolumeCreate.

        :param caching_policy: The caching_policy of this VolumeCreate.
        :type: str
        """

        self._caching_policy = caching_policy

    @property
    def name(self):
        """
        Gets the name of this VolumeCreate.
        The internal name of the volume

        :return: The name of this VolumeCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VolumeCreate.
        The internal name of the volume

        :param name: The name of this VolumeCreate.
        :type: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def size_total(self):
        """
        Gets the size_total of this VolumeCreate.
        The total size of the volume,  in bytes. If creating, the size of the volume.

        :return: The size_total of this VolumeCreate.
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """
        Sets the size_total of this VolumeCreate.
        The total size of the volume,  in bytes. If creating, the size of the volume.

        :param size_total: The size_total of this VolumeCreate.
        :type: int
        """

        self._size_total = size_total

    @property
    def aggregate_name(self):
        """
        Gets the aggregate_name of this VolumeCreate.
        If applicable, the aggregate to place the volume in (NetApp only). If not provided, will use the one with the most free space.

        :return: The aggregate_name of this VolumeCreate.
        :rtype: str
        """
        return self._aggregate_name

    @aggregate_name.setter
    def aggregate_name(self, aggregate_name):
        """
        Sets the aggregate_name of this VolumeCreate.
        If applicable, the aggregate to place the volume in (NetApp only). If not provided, will use the one with the most free space.

        :param aggregate_name: The aggregate_name of this VolumeCreate.
        :type: str
        """
        if aggregate_name is not None and len(aggregate_name) < 1:
            raise ValueError("Invalid value for `aggregate_name`, length must be greater than or equal to `1`")

        self._aggregate_name = aggregate_name

    @property
    def junction_path(self):
        """
        Gets the junction_path of this VolumeCreate.

        :return: The junction_path of this VolumeCreate.
        :rtype: str
        """
        return self._junction_path

    @junction_path.setter
    def junction_path(self, junction_path):
        """
        Sets the junction_path of this VolumeCreate.

        :param junction_path: The junction_path of this VolumeCreate.
        :type: str
        """
        if junction_path is not None and len(junction_path) < 1:
            raise ValueError("Invalid value for `junction_path`, length must be greater than or equal to `1`")

        self._junction_path = junction_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VolumeCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
